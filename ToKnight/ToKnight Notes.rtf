{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh14160\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \ul \ulc0 UI / UX\
\ulnone \
Splash Screen\
Display table view of channels\
	User created channels\
	User invited channels\
	General channel\
User enters channel\
	Display Main view\
		Contains vote buttons\
		Contains stack of card views\
			Stack 3 card views\
			Swipe left for down vote\
			Swipe right for up vote\
			Overlay view during swipe\
\
\ul Functioning\ulnone \
\
Splash screen - static text\
Display table view of channels\
	Query DB for users active channels \{\
		Membership channels\
		General channel\
		Create new channel\
\}\
\
User selects a channel\
\
User sends request for query to AWS Queries table\
If Query exists return results from Events by QueriesToEvents mapping\
If Query does not exists \{\
	Execute query using AWS lambda\
	Populate query results into Events table\
	Store query and mappings in Queries and QueriesToEvents\
	Return results from Events table using QueriesToEvents mapping\
\}\
\
	\
\
\
\
\ul Databases\ulnone \
\
Channels\
	ChannelID - identity\
	UserID	- many-to-one relationship with Users table, UserID\
	CreatedAt	- date/time\
	Active_Dead - boolean\
	PermissionLevel - int (1 = Full, 2 = Participant)\
		Full = add / remove people from channel\
		Participant = vote on items\
\
UserChannels\
	UserChannelID - identity\
	UserID	    - int, many-to-one relationship w/ Users table, UsersID\
	ChannelID	    - int, many-to-one relationship w/ Channels table, ChannelID\
\
Users\
	UserID = identity\
	Name = string\
	Email = string\
	CreatedAt = date/time\
\
Events\
	EventID = identity\
	EventTitle = string\
	EventDateTime = date/time\
	EventURL = string\
\
EventVotes\
	VoteID = identity	\
	EventID = int, many-to-one relationship w/ Events table, EventID\
	UserID = int, many-to-one relationship w/ Users table, UserID\
		unique on EventID + UserID\
	Vote = int (1 = hate, 2 = dislike, 3 = like, 4 = love)\
\
Queries\
	QueryID = identity\
	QueryString = varchar(1000)\
\
QueriesToEvents\
	QueryToEventID = identity\
	QueryID = many-to-many with Queries table, QueryID\
	EventID = many-to-many relationship with Events table, EventID\
		unique on QueryID + EventID\
\
Votes\
	VoteID INT UNIQUE PRIMARY KEY NOT NULL\
	VoteDefinition varchar(100)\
	VoteValue iINT\
	}